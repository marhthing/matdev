/**
 * MATDEV Lyrics Plugin
 * Get song lyrics using free APIs (no API key required)
 */

const axios = require('axios');
const config = require('../config');

class LyricsPlugin {
    constructor() {
        this.name = 'lyrics';
        this.description = 'Song lyrics fetcher';
        this.version = '1.0.0';
        this.enabled = true;
    }

    /**
     * Initialize the plugin
     */
    async init(bot) {
        this.bot = bot;
        try {
            // Register lyrics command
            this.bot.messageHandler.registerCommand('lyrics', this.lyricsCommand.bind(this), {
                description: 'Get song lyrics',
                usage: `${config.PREFIX}lyrics <artist> - <song title>`,
                category: 'entertainment',
                plugin: 'lyrics',
                source: 'lyrics.js'
            });

            console.log('‚úÖ Lyrics Plugin loaded');
            return true;
        } catch (error) {
            console.error('‚ùå Failed to initialize Lyrics plugin:', error);
            return false;
        }
    }

    /**
     * Search lyrics using LRCLIB (free, no API key required)
     */
    async searchLyrics(artist, track) {
        try {
            const response = await axios.get('https://lrclib.net/api/search', {
                params: {
                    artist_name: artist,
                    track_name: track
                },
                headers: {
                    'User-Agent': 'MATDEV-Bot/1.0.0 (WhatsApp Bot)'
                },
                timeout: 10000
            });

            if (response.data && response.data.length > 0) {
                const result = response.data[0];
                return {
                    found: true,
                    lyrics: result.plainLyrics || result.syncedLyrics || null,
                    artist: result.artistName,
                    track: result.trackName,
                    album: result.albumName,
                    duration: result.duration
                };
            }

            return { found: false };
        } catch (error) {
            console.error('LRCLIB search error:', error);
            throw error;
        }
    }

    /**
     * Alternative lyrics search using lyrics.ovh
     */
    async searchLyricsAlternative(artist, track) {
        try {
            const response = await axios.get(`https://api.lyrics.ovh/v1/${encodeURIComponent(artist)}/${encodeURIComponent(track)}`, {
                timeout: 10000
            });

            if (response.data && response.data.lyrics) {
                return {
                    found: true,
                    lyrics: response.data.lyrics,
                    artist: artist,
                    track: track
                };
            }

            return { found: false };
        } catch (error) {
            console.error('Lyrics.ovh search error:', error);
            throw error;
        }
    }

    /**
     * Parse artist and song from input
     */
    parseQuery(query) {
        // Look for " - " separator
        if (query.includes(' - ')) {
            const parts = query.split(' - ');
            return {
                artist: parts[0].trim(),
                track: parts.slice(1).join(' - ').trim()
            };
        }

        // Look for " by " separator
        if (query.toLowerCase().includes(' by ')) {
            const parts = query.toLowerCase().split(' by ');
            return {
                track: parts[0].trim(),
                artist: parts[1].trim()
            };
        }

        // Try to guess (assume first part is artist)
        const words = query.split(' ');
        if (words.length >= 2) {
            return {
                artist: words[0],
                track: words.slice(1).join(' ')
            };
        }

        return null;
    }

    /**
     * Format lyrics for WhatsApp (handle long messages)
     */
    formatLyrics(data) {
        let header = `üéµ *${data.track}*\n`;
        if (data.artist) {
            header += `üë§ *Artist:* ${data.artist}\n`;
        }
        if (data.album) {
            header += `üíø *Album:* ${data.album}\n`;
        }
        header += `\nüìù *Lyrics:*\n\n`;

        if (!data.lyrics) {
            return header + 'Sorry, lyrics not found for this song.' + `\n\n_üîß Generated by: ${config.BOT_NAME}_`;
        }

        // Clean up lyrics
        let lyrics = data.lyrics.trim();
        
        // Remove any HTML tags if present
        lyrics = lyrics.replace(/<[^>]*>/g, '');
        
        const footer = `\n\n_üîß Generated by: ${config.BOT_NAME}_`;
        
        // Calculate max lyrics length per message (WhatsApp limit ~4096, leave room for header/footer)
        const maxLyricsLength = 3500 - header.length - footer.length;
        
        // If lyrics fit in one message, return as single message
        if (lyrics.length <= maxLyricsLength) {
            return header + lyrics + footer;
        }
        
        // Split lyrics into chunks for multiple messages
        return this.chunkLyrics(header, lyrics, footer, maxLyricsLength);
    }

    /**
     * Split long lyrics into multiple message chunks
     */
    chunkLyrics(header, lyrics, footer, maxLength) {
        const chunks = [];
        const lines = lyrics.split('\n');
        let currentChunk = '';
        let chunkNumber = 1;
        
        for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            const lineWithNewline = line + (i < lines.length - 1 ? '\n' : '');
            
            // Check if adding this line would exceed the limit
            if (currentChunk.length + lineWithNewline.length > maxLength && currentChunk.length > 0) {
                // Save current chunk and start new one
                chunks.push({
                    text: header + currentChunk + footer,
                    part: chunkNumber,
                    isLast: false
                });
                currentChunk = lineWithNewline;
                chunkNumber++;
            } else {
                currentChunk += lineWithNewline;
            }
        }
        
        // Add the last chunk
        if (currentChunk.length > 0) {
            chunks.push({
                text: header + currentChunk + footer,
                part: chunkNumber,
                isLast: true
            });
        }
        
        // Add part numbers to multi-part messages
        if (chunks.length > 1) {
            chunks.forEach((chunk, index) => {
                const partInfo = `\n\nüìÑ *Part ${chunk.part} of ${chunks.length}*`;
                chunk.text = chunk.text.replace(footer, partInfo + footer);
            });
        }
        
        return chunks;
    }

    /**
     * Handle lyrics command
     */
    async lyricsCommand(messageInfo) {
        try {
            const query = messageInfo.args.join(' ').trim();
            
            if (!query) {
                await this.bot.messageHandler.reply(messageInfo, 
                    `‚ùå Please provide artist and song title.\n\nUsage:\n${config.PREFIX}lyrics <artist> - <song title>\n${config.PREFIX}lyrics <song> by <artist>\n\nExamples:\n${config.PREFIX}lyrics Ed Sheeran - Perfect\n${config.PREFIX}lyrics Perfect by Ed Sheeran`);
                return;
            }

            // Parse the query
            const parsed = this.parseQuery(query);
            if (!parsed) {
                await this.bot.messageHandler.reply(messageInfo, 
                    `‚ùå Could not parse artist and song title. Please use format:\n${config.PREFIX}lyrics <artist> - <song title>`);
                return;
            }

            // Send searching message
            const searchingMsg = await this.bot.messageHandler.reply(messageInfo, 'üîç Searching for lyrics...');

            try {
                // Try primary API (LRCLIB)
                let result = await this.searchLyrics(parsed.artist, parsed.track);
                
                // If not found, try alternative API
                if (!result.found) {
                    result = await this.searchLyricsAlternative(parsed.artist, parsed.track);
                }

                if (result.found) {
                    const formattedLyrics = this.formatLyrics(result);
                    
                    // Handle single message or multiple chunks
                    if (typeof formattedLyrics === 'string') {
                        // Single message - edit the searching message
                        await this.bot.sock.sendMessage(messageInfo.chat_jid, {
                            text: formattedLyrics,
                            edit: searchingMsg.key
                        });
                    } else if (Array.isArray(formattedLyrics)) {
                        // Multiple chunks - edit first message and send additional chunks
                        await this.bot.sock.sendMessage(messageInfo.chat_jid, {
                            text: formattedLyrics[0].text,
                            edit: searchingMsg.key
                        });
                        
                        // Send remaining chunks as new messages
                        for (let i = 1; i < formattedLyrics.length; i++) {
                            await new Promise(resolve => setTimeout(resolve, 1000)); // 1 second delay between chunks
                            await this.bot.sock.sendMessage(messageInfo.chat_jid, {
                                text: formattedLyrics[i].text
                            });
                        }
                    }
                } else {
                    await this.bot.sock.sendMessage(messageInfo.chat_jid, {
                        text: `‚ùå Lyrics not found for "${parsed.artist} - ${parsed.track}"\n\nTry:\n‚Ä¢ Check spelling\n‚Ä¢ Try different format\n‚Ä¢ Search for popular songs\n\n_Note: This uses free lyrics databases which may not have all songs._`,
                        edit: searchingMsg.key
                    });
                }

            } catch (apiError) {
                console.error('Lyrics API error:', apiError);
                await this.bot.sock.sendMessage(messageInfo.chat_jid, {
                    text: `‚ùå Failed to fetch lyrics. The lyrics service might be temporarily unavailable. Please try again later.`,
                    edit: searchingMsg.key
                });
            }

        } catch (error) {
            console.error('Error in lyrics command:', error);
            await this.bot.messageHandler.reply(messageInfo, '‚ùå Error processing your request.');
        }
    }

    /**
     * Cleanup method
     */
    async cleanup() {
        console.log('üßπ Lyrics plugin cleanup completed');
    }
}

// Export function for plugin initialization
module.exports = {
    init: async (bot) => {
        const plugin = new LyricsPlugin();
        await plugin.init(bot);
        return plugin;
    }
};