const axios = require('axios');
const fs = require('fs-extra');
const path = require('path');
const config = require('../config');

class ImagePlugin {
    constructor() {
        this.name = 'image';
        this.description = 'Free AI image generation using DeepAI and Hugging Face APIs';
        this.version = '2.0.0';
        this.enabled = true;
    }

    /**
     * Initialize the plugin
     */
    async init(bot) {
        this.bot = bot;
        try {
            // Register image generation commands
            this.bot.messageHandler.registerCommand('image', this.imageCommand.bind(this), {
                description: 'Generate images using free AI services',
                usage: `${config.PREFIX}image <description>`,
                category: 'ai',
                plugin: 'image',
                source: 'image.js'
            });

            this.bot.messageHandler.registerCommand('img', this.imageCommand.bind(this), {
                description: 'Generate images using free AI services (short)',
                usage: `${config.PREFIX}img <description>`,
                category: 'ai',
                plugin: 'image',
                source: 'image.js'
            });

            console.log('‚úÖ Free AI Image plugin loaded');
            return true;
        } catch (error) {
            console.error('‚ùå Failed to initialize Image plugin:', error);
            return false;
        }
    }

    /**
     * Handle image generation command
     */
    async imageCommand(messageInfo) {
        try {
            // Get the prompt from the message
            const prompt = messageInfo.args.join(' ').trim();
            if (!prompt) {
                await this.bot.messageHandler.reply(messageInfo, 
                    '‚ùå Please provide an image description.\nUsage: .image <description>\n\nExamples:\n‚Ä¢ .image a cat in a fancy restaurant\n‚Ä¢ .img futuristic city with flying cars\n\nüÜì This uses completely FREE AI services!');
                return;
            }

            // Send generating indicator
            const generatingMsg = await this.bot.messageHandler.reply(messageInfo, 'üé® Generating image with free AI...');

            try {
                // Try multiple free services in order
                const services = [
                    () => this.generateWithPollinations(prompt),
                    () => this.generateWithHuggingFace(prompt)
                ];

                let imageBuffer = null;
                let serviceName = '';
                
                for (const [index, service] of services.entries()) {
                    try {
                        console.log(`Trying free image service ${index + 1}...`);
                        const result = await service();
                        if (result && result.success) {
                            imageBuffer = result.imageBuffer;
                            serviceName = result.serviceName;
                            console.log(`‚úÖ ${serviceName} succeeded`);
                            break;
                        }
                    } catch (serviceError) {
                        console.log(`‚ùå Service ${index + 1} failed: ${serviceError.message}`);
                        continue;
                    }
                }

                if (!imageBuffer) {
                    await this.bot.sock.sendMessage(messageInfo.chat_jid, {
                        text: '‚ùå All free image services are currently unavailable. Please try again later.',
                        edit: generatingMsg.key
                    });
                    return;
                }

                // Create temporary file path
                const tempFile = path.join(__dirname, '..', 'tmp', `generated_${Date.now()}.jpg`);
                
                // Ensure tmp directory exists
                await fs.ensureDir(path.dirname(tempFile));
                
                // Write image buffer to temp file
                await fs.writeFile(tempFile, imageBuffer);

                // Send the generated image
                await this.bot.sock.sendMessage(messageInfo.chat_jid, {
                    image: { url: tempFile },
                    caption: `_üîß Generated by: ${config.BOT_NAME}_`
                });

                // Delete the generating message
                await this.bot.sock.sendMessage(messageInfo.chat_jid, {
                    delete: generatingMsg.key
                });

                // Clean up temp file immediately after sending
                await fs.unlink(tempFile).catch(() => {});

                console.log('‚úÖ Free image generated and sent');

            } catch (error) {
                console.error('Image generation error:', error);
                await this.bot.sock.sendMessage(messageInfo.chat_jid, {
                    text: '‚ùå Error generating image. Please try again later.',
                    edit: generatingMsg.key
                });
            }

        } catch (error) {
            console.error('Error in image command:', error);
            await this.bot.messageHandler.reply(messageInfo, '‚ùå Error processing your image request.');
        }
    }

    /**
     * Generate image using Pollinations (completely free, no auth)
     */
    async generateWithPollinations(prompt) {
        try {
            // Pollinations.ai - completely free image generation
            const encodedPrompt = encodeURIComponent(prompt);
            const imageUrl = `https://image.pollinations.ai/prompt/${encodedPrompt}?width=1024&height=1024&nologo=true`;
            
            const response = await axios.get(imageUrl, {
                responseType: 'arraybuffer',
                timeout: 45000,
                headers: {
                    'User-Agent': 'MATDEV-Bot/2.0'
                }
            });

            if (response.data && response.data.byteLength > 1000) {
                return {
                    success: true,
                    imageBuffer: Buffer.from(response.data),
                    serviceName: 'Pollinations.ai'
                };
            }

            throw new Error('Invalid image data received');
            
        } catch (error) {
            throw new Error(`Pollinations failed: ${error.message}`);
        }
    }

    /**
     * Generate image using Hugging Face (free tier, no auth)
     */
    async generateWithHuggingFace(prompt) {
        try {
            const models = [
                'runwayml/stable-diffusion-v1-5',        // Most reliable
                'stabilityai/stable-diffusion-2-1',      // Alternative
                'CompVis/stable-diffusion-v1-4'          // Backup
            ];

            for (const model of models) {
                try {
                    console.log(`Trying HF model: ${model}`);
                    
                    const response = await axios.post(
                        `https://api-inference.huggingface.co/models/${model}`,
                        { inputs: prompt },
                        {
                            headers: {
                                'Content-Type': 'application/json',
                                'x-wait-for-model': 'true'  // Wait for model to load
                            },
                            responseType: 'arraybuffer',
                            timeout: 120000  // 2 minutes for model loading
                        }
                    );

                    // Check if we got actual image data (not an error message)
                    if (response.data && response.data.byteLength > 1000) {
                        // Verify it's actually image data by checking magic bytes
                        const bytes = new Uint8Array(response.data.slice(0, 4));
                        const isImage = (bytes[0] === 0xFF && bytes[1] === 0xD8) || // JPEG
                                      (bytes[0] === 0x89 && bytes[1] === 0x50) || // PNG
                                      (bytes[0] === 0x47 && bytes[1] === 0x49);   // GIF
                        
                        if (isImage) {
                            return {
                                success: true,
                                imageBuffer: Buffer.from(response.data),
                                serviceName: 'Hugging Face'
                            };
                        }
                    }
                } catch (modelError) {
                    console.log(`HF model ${model} failed: ${modelError.message}`);
                    continue;
                }
            }

            throw new Error('All HF models failed');
            
        } catch (error) {
            throw new Error(`Hugging Face failed: ${error.message}`);
        }
    }


    /**
     * Cleanup method
     */
    async cleanup() {
        console.log('üßπ Free Image plugin cleanup completed');
    }
}

// Export function for plugin initialization
module.exports = {
    init: async (bot) => {
        const plugin = new ImagePlugin();
        await plugin.init(bot);
        return plugin;
    }
};