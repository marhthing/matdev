/**
 * MATDEV QR Code Plugin
 * Generate QR codes from text or URLs
 */

const QRCode = require('qrcode');
const config = require('../config');
const fs = require('fs-extra');
const path = require('path');

class QRPlugin {
    constructor() {
        this.name = 'qr';
        this.description = 'QR code generation';
        this.version = '1.0.0';
    }

    /**
     * Initialize plugin
     */
    async init(bot) {
        this.bot = bot;
        this.registerCommands();
        console.log('‚úÖ QR plugin loaded');
    }

    /**
     * Register QR commands
     */
    registerCommands() {
        this.bot.messageHandler.registerCommand('qr', this.generateQR.bind(this), {
            description: 'Generate QR code from text or URL',
            usage: `${config.PREFIX}qr <text/url>`,
            category: 'utility',
            plugin: 'qr',
            source: 'qr.js'
        });
    }

    /**
     * Generate QR code command
     */
    async generateQR(messageInfo) {
        let tempFile;
        try {
            const { args } = messageInfo;
            let inputText = '';

            // Check for quoted/tagged message first
            const quotedMessage = messageInfo.message?.extendedTextMessage?.contextInfo?.quotedMessage ||
                                messageInfo.message?.quotedMessage;
            
            if (quotedMessage) {
                // Extract text from quoted message
                if (quotedMessage.conversation) {
                    inputText = quotedMessage.conversation;
                } else if (quotedMessage.extendedTextMessage?.text) {
                    inputText = quotedMessage.extendedTextMessage.text;
                } else if (quotedMessage.imageMessage?.caption) {
                    inputText = quotedMessage.imageMessage.caption;
                } else if (quotedMessage.videoMessage?.caption) {
                    inputText = quotedMessage.videoMessage.caption;
                } else if (quotedMessage.documentMessage?.caption) {
                    inputText = quotedMessage.documentMessage.caption;
                }
            }
            
            // If no text from quoted message, check args
            if (!inputText && args && args.length > 0) {
                inputText = args.join(' ');
            }
            
            // If still no text, show usage
            if (!inputText || inputText.trim() === '') {
                await this.bot.messageHandler.reply(messageInfo, `‚ùå Please provide text or URL to generate QR code or reply to a message\n\nUsage: ${config.PREFIX}qr <text/url>\nOr reply to a message: ${config.PREFIX}qr\n\nExample: ${config.PREFIX}qr https://github.com`);
                return;
            }
            
            // Create temporary file path
            tempFile = path.join(__dirname, '..', 'tmp', `qr_${Date.now()}.png`);
            
            // Ensure tmp directory exists
            await fs.ensureDir(path.dirname(tempFile));
            
            // Generate QR code options
            const qrOptions = {
                errorCorrectionLevel: 'M',
                width: 256,
                margin: 2,
                color: {
                    dark: '#000000',
                    light: '#FFFFFF'
                }
            };

            // Generate QR code to file
            await QRCode.toFile(tempFile, inputText, qrOptions);

            // Read file as buffer
            const qrBuffer = await fs.readFile(tempFile);

            // Create simple caption
            const caption = `_üîß Generated by: ${config.BOT_NAME}_`;

            // Send QR code image
            await this.bot.sock.sendMessage(messageInfo.chat_jid, {
                image: qrBuffer,
                caption: caption
            });

        } catch (error) {
            console.error('Error generating QR code:', error);
            await this.bot.messageHandler.reply(messageInfo, '‚ùå Failed to generate QR code. Please try again.');
        } finally {
            // Clean up temp file
            if (tempFile) {
                await fs.unlink(tempFile).catch(() => {});
            }
        }
    }
}

module.exports = new QRPlugin();