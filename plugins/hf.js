
/**
 * MATDEV Hugging Face Plugin
 * Text-to-image generation using FLUX.1-schnell model
 */

const axios = require('axios');
const fs = require('fs-extra');
const path = require('path');
const config = require('../config');

class HuggingFacePlugin {
    constructor() {
        this.name = 'hf';
        this.description = 'Hugging Face text-to-image generation';
        this.version = '1.0.0';
        this.enabled = true;
        this.tempDir = path.join(process.cwd(), 'tmp');
        this.apiUrl = 'https://api-inference.huggingface.co/models/black-forest-labs/FLUX.1-schnell';
    }

    /**
     * Initialize the plugin
     */
    async init(bot) {
        this.bot = bot;
        try {
            // Ensure temp directory exists
            await fs.ensureDir(this.tempDir);

            this.registerCommands();
            console.log('‚úÖ Hugging Face plugin loaded');
            return true;
        } catch (error) {
            console.error('‚ùå Failed to initialize Hugging Face plugin:', error);
            return false;
        }
    }

    /**
     * Register commands
     */
    registerCommands() {
        // Text to image command
        this.bot.messageHandler.registerCommand('ttm', this.textToImageCommand.bind(this), {
            description: 'Generate image from text using FLUX.1-schnell',
            usage: `${config.PREFIX}ttm <your prompt>`,
            category: 'ai'
        });

        // Alternative command name
        this.bot.messageHandler.registerCommand('imagine', this.textToImageCommand.bind(this), {
            description: 'Generate image from text using FLUX.1-schnell',
            usage: `${config.PREFIX}imagine <your prompt>`,
            category: 'ai'
        });
    }

    /**
     * Text to Image Command
     */
    async textToImageCommand(messageInfo) {
        try {
            const apiKey = process.env.HF_API_KEY;
            if (!apiKey) {
                await this.bot.messageHandler.reply(messageInfo, 
                    '‚ùå No API found, use .setenv HF_API_KEY=<key>\n\nüîë Get your API key from: https://huggingface.co/settings/tokens');
                return;
            }

            let prompt = messageInfo.args.join(' ').trim();
            
            // Check if replying to a message
            const quotedMessage = messageInfo.message?.extendedTextMessage?.contextInfo?.quotedMessage ||
                                messageInfo.message?.quotedMessage;

            if (quotedMessage && !prompt) {
                // Extract text from quoted message
                if (quotedMessage.conversation) {
                    prompt = quotedMessage.conversation;
                } else if (quotedMessage.extendedTextMessage?.text) {
                    prompt = quotedMessage.extendedTextMessage.text;
                } else if (quotedMessage.imageMessage?.caption) {
                    prompt = quotedMessage.imageMessage.caption;
                } else if (quotedMessage.videoMessage?.caption) {
                    prompt = quotedMessage.videoMessage.caption;
                }
            }

            if (!prompt) {
                await this.bot.messageHandler.reply(messageInfo, 
                    '‚ùå Please provide a text prompt to generate an image.\nUsage: .ttm <your prompt> OR reply to any text message with .ttm');
                return;
            }

            if (prompt.length > 500) {
                await this.bot.messageHandler.reply(messageInfo, '‚ùå Prompt too long. Please keep it under 500 characters.');
                return;
            }

            const processingMsg = await this.bot.messageHandler.reply(messageInfo, 'üé® Generating image with FLUX.1-schnell...');

            try {
                // Make request to Hugging Face API
                const response = await axios.post(this.apiUrl, {
                    inputs: prompt
                }, {
                    headers: {
                        'Authorization': `Bearer ${apiKey}`,
                        'Content-Type': 'application/json'
                    },
                    responseType: 'arraybuffer',
                    timeout: 120000 // 2 minutes timeout for image generation
                });

                if (!response.data || response.data.length === 0) {
                    throw new Error('Empty response from Hugging Face API');
                }

                // Save image to temp file
                const outputPath = path.join(this.tempDir, `flux_${Date.now()}.png`);
                await fs.writeFile(outputPath, response.data);

                // Create simple caption like other plugins
                const caption = `_üîß Generated by: ${config.BOT_NAME}_`;

                // Send the generated image
                await this.bot.sock.sendMessage(messageInfo.chat_jid, {
                    image: fs.readFileSync(outputPath),
                    caption: caption
                });

                // Clean up temp file
                await fs.remove(outputPath);

            } catch (apiError) {
                console.error('Hugging Face API error:', apiError);
                
                let errorMessage = '‚ùå Error generating image. Please try again.';
                
                if (apiError.response?.status === 401) {
                    errorMessage = '‚ùå Invalid API key. Please check your HF_API_KEY.';
                } else if (apiError.response?.status === 429) {
                    errorMessage = '‚ùå API rate limit exceeded. Please try again later.';
                } else if (apiError.response?.status === 503) {
                    errorMessage = '‚ùå Model is loading. Please wait a moment and try again.';
                } else if (apiError.code === 'ECONNABORTED') {
                    errorMessage = '‚ùå Request timeout. The model might be busy, please try again.';
                }

                await this.bot.sock.sendMessage(messageInfo.chat_jid, {
                    text: errorMessage,
                    edit: processingMsg.key
                });
            }

        } catch (error) {
            console.error('Error in text-to-image command:', error);
            await this.bot.messageHandler.reply(messageInfo, '‚ùå Error processing your request.');
        }
    }

    /**
     * Cleanup method
     */
    async cleanup() {
        try {
            const files = await fs.readdir(this.tempDir);
            const now = Date.now();
            let cleaned = 0;

            for (const file of files) {
                if (file.startsWith('.')) continue;

                const filePath = path.join(this.tempDir, file);
                const stats = await fs.stat(filePath);

                // Remove files older than 1 hour
                if (now - stats.mtime.getTime() > 3600000) {
                    await fs.remove(filePath);
                    cleaned++;
                }
            }

            if (cleaned > 0) {
                console.log(`üßπ Cleaned ${cleaned} temporary HF files`);
            }
        } catch (error) {
            console.error('Error cleaning HF temporary files:', error);
        }

        console.log('üßπ Hugging Face plugin cleanup completed');
    }
}

// Export function for plugin initialization
module.exports = {
    init: async (bot) => {
        const plugin = new HuggingFacePlugin();
        await plugin.init(bot);
        return plugin;
    }
};
